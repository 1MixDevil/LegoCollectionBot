import re
import httpx
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from HttpRequests import add_figure_to_user, delete_figure_to_user
from inlineKeyBoards import main_kb, make_info_kb, make_suggestions_kb, nav_kb
from FMSState import InfoFigures
from config import COLL_BASE
from io import BytesIO
import os

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
MAX_SERIALS_PER_REQUEST = int(os.getenv("MAX_SERIALS_PER_REQUEST", 50))

router = Router()

@router.callback_query(lambda cb: cb.data == "info")
async def cb_info(call: types.CallbackQuery, state: FSMContext):
    # –ó–∞–ø—Ä–æ—Å —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–µ—Ä–µ–∑ , –∏–ª–∏ ;) –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∏–≥—É—Ä–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (,) –∏–ª–∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;), –∏–ª–∏ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä:",
        reply_markup=nav_kb()
    )
    await state.set_state(InfoFigures.waiting_serial)
    await call.answer()

@router.message(InfoFigures.waiting_serial)
async def get_info_figure(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = str(message.from_user.id)
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
    serials = [s.strip() for s in re.split(r"[,; ]", text) if s.strip()]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(serials) > MAX_SERIALS_PER_REQUEST:
        await message.answer(
            f"‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_SERIALS_PER_REQUEST} –∞—Ä—Ç–∏–∫—É–ª–∞ –∑–∞ —Ä–∞–∑.",
            reply_markup=nav_kb()
        )
        return
    for serial in serials:
        await handle_serial(serial, message.bot, message.chat.id, user_id)
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –æ—Ç–º–µ–Ω—ã

@router.callback_query(lambda cb: cb.data and cb.data.startswith("select_similar:"))
async def cb_info_select(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    _, serial = call.data.split(":", 1)
    await call.message.delete()
    user_id = str(call.from_user.id)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Ö–æ–∂–µ–≥–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    await handle_serial(serial, call.bot, call.message.chat.id, user_id)

async def handle_serial(serial: str, bot: Bot, chat_id: int, user_id: str):
    print("START")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{COLL_BASE}/figure/info/",
                params={"user_id": int(user_id), "bricklink_id": serial}
            )
            response.raise_for_status()
            info = response.json()
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            suggestions = await fetch_similar_serials(serial)
            if suggestions:
                kb = make_suggestions_kb(suggestions)
                await bot.send_message(
                    chat_id,
                    "–§–∏–≥—É—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:",
                    reply_markup=kb
                )
            else:
                await bot.send_message(
                    chat_id,
                    f"–§–∏–≥—É—Ä–∫–∞ {serial} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=nav_kb()
                )
        else:
            await bot.send_message(
                chat_id,
                f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è {serial}: {e.response.status_code}",
                reply_markup=nav_kb()
            )
        return
    except Exception:
        await bot.send_message(
            chat_id,
            f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {serial}.",
            reply_markup=nav_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    user_rec = info.get("user_record") or {}
    caption = (
        f"üîç <b>{info['name']}</b>\n"
        f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{info['bricklink_id']}</code>\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {user_rec.get('price_buy') or '‚Äì'}\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {user_rec.get('price_sale') or '‚Äì'}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {user_rec.get('description') or '‚Äì'}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {user_rec.get('buy_date') or '‚Äì'}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: {user_rec.get('sale_date') or '‚Äì'}"
    )
    kb = make_info_kb(serial)
    image_url = f"https://img.bricklink.com/ItemImage/MN/0/{serial}.png"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    try:
        async with httpx.AsyncClient(headers={"User-Agent": "Mozilla/5.0"}) as client:
            img_resp = await client.get(image_url)
            img_resp.raise_for_status()
            buf = BytesIO(img_resp.content)
            buf.name = image_url.rsplit('/', 1)[-1]
            buf.seek(0)
            file = BufferedInputFile(buf.read(), filename=buf.name)
        await bot.send_photo(
            chat_id=chat_id,
            photo=file,
            caption=caption,
            parse_mode="HTML",
            reply_markup=kb
        )
    except httpx.HTTPStatusError:
        await bot.send_message(
            chat_id,
            caption,
            parse_mode="HTML",
            reply_markup=kb
        )

@router.callback_query(lambda cb: cb.data and cb.data.startswith("info_action:"))
async def cb_info_actions(call: types.CallbackQuery):
    await call.answer()
    _, action, serial = call.data.split(":")
    user_id = str(call.from_user.id)

    if action == "wishlist":
        await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ!", show_alert=True)
    elif action == "add":
        await add_figure_to_user(bricklink_id=serial, user_id=user_id)
        await call.answer("–§–∏–≥—É—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    elif action == "delete":
        await delete_figure_to_user(serial, user_id)
        await call.answer("–§–∏–≥—É—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await call.answer()

async def fetch_similar_serials(serial: str) -> list[str]:
    async with httpx.AsyncClient() as client:
        r = await client.get(
            f"{COLL_BASE}/figure/similar/",
            params={"name": serial, "limit": 5, "threshold": 0.3}
        )
        if r.status_code == 200:
            return r.json()
    return []