from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === Inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===

# 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üì¶ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="my_collection"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",       callback_data="add"),
    ],
    [
        InlineKeyboardButton(text="üìã –ñ–µ–ª–∞–µ–º–æ–µ",       callback_data="wishlist"),
        InlineKeyboardButton(text="üè∑ Tier‚Äë–ª–∏—Å—Ç",      callback_data="create_tierlist"),
    ],
    [
        InlineKeyboardButton(text="üõí –¢–æ—Ä–≥–æ–≤–ª—è",        callback_data="marketplace"),
        InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",       callback_data="settings"),
    ],
    [
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å",          callback_data="help"),
    ],
])

# 2. –ü–æ–¥–º–µ–Ω—é ¬´–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è¬ª
collection_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üóí –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="my_collection"),
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",    callback_data="collection_clear"),
    ],
    [
        InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç Excel",   callback_data="collection_excel"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",            callback_data="cancel"),
    ],
])

# 3. –ü–æ–¥–º–µ–Ω—é ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª
add_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ûï –û–¥–Ω–∞ —Ñ–∏–≥—É—Ä–∫–∞",       callback_data="add_solo_figure"),
        InlineKeyboardButton(text="‚ûï‚ûï –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä–æ–∫", callback_data="add_few_figure"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",              callback_data="cancel"),
    ],
])

# 4. –ü–æ–¥–º–µ–Ω—é ¬´–ñ–µ–ª–∞–µ–º–æ–µ¬ª
wishlist_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="wishlist"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",         callback_data="info_action:wishlist"),
    ],
    [
        InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π/–û—Ç–∫—Ä—ã—Ç—ã–π", callback_data="toggle_wishlist_visibility"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",              callback_data="cancel"),
    ],
])

# 5. –ü–æ–¥–º–µ–Ω—é ¬´Tier‚Äë–ª–∏—Å—Ç¬ª
tierlist_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìë –ú–æ–∏ —Å–ø–∏—Å–∫–∏",      callback_data="list_tierlists"),
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",   callback_data="create_tierlist"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",           callback_data="cancel"),
    ],
])

# 5.1. –ü–æ–¥–º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ tier‚Äë–ª–∏—Å—Ç–∞
def tierlist_item_kb(tierlist_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üñº –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–ª–∞–∂",    callback_data=f"show_collage:{tierlist_id}"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",  callback_data=f"add_to_tierlist:{tierlist_id}"),
        ],
        [
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",   callback_data=f"remove_from_tierlist:{tierlist_id}"),
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",   callback_data=f"export_tierlist_excel:{tierlist_id}"),
        ],
        [
            InlineKeyboardButton(text="üî§ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",     callback_data=f"rename_tierlist:{tierlist_id}"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",             callback_data="list_tierlists"),
        ],
    ])

# 6. –ü–æ–¥–º–µ–Ω—é ¬´–¢–æ—Ä–≥–æ–≤–ª—è¬ª
marketplace_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üõç –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_listings"),
        InlineKeyboardButton(text="üîé –í—Å–µ –ª–æ—Ç—ã",       callback_data="browse_listings"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",           callback_data="cancel"),
    ],
])

# 7. –ü–æ–¥–º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
settings_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å BrickLink", callback_data="bind_bricklink"),
    ],
    [
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ON/OFF",   callback_data="toggle_notifications"),
    ],
    [
        InlineKeyboardButton(text="‚≠ê Premium",              callback_data="premium"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",                callback_data="cancel"),
    ],
])

# 8. –ü–æ–¥–º–µ–Ω—é ¬´–ü–æ–º–æ—â—å¬ª
help_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìñ FAQ",              callback_data="faq"),
        InlineKeyboardButton(text="‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",   callback_data="feedback"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",             callback_data="cancel"),
    ],
])

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ===
confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_yes")],
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",      callback_data="confirm_no")],
])

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ù–∞–∑–∞–¥ + –û—Ç–º–µ–Ω–∞)
def nav_kb(back: str = None) -> InlineKeyboardMarkup:
    buttons = []
    if back:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back))
    buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# === –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===

def make_info_kb(serial: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è info‚Äë–∫–æ–º–∞–Ω–¥—ã
    —Å –∫–Ω–æ–ø–∫–∞–º–∏: wishlist, buy, sell, add, delete, cancel
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ ¬´–ñ–µ–ª–∞–µ–º–æ–µ¬ª",
                callback_data=f"info_action:wishlist:{serial}"
            ),
            InlineKeyboardButton(
                text="–ö—É–ø–∏—Ç—å",
                callback_data=f"info_action:buy:{serial}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–¥–∞—Ç—å",
                callback_data=f"info_action:sell:{serial}"
            ),
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                callback_data=f"info_action:add:{serial}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                callback_data=f"info_action:delete:{serial}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        ]
    ])

def make_suggestions_kb(suggestions: list[dict]) -> InlineKeyboardMarkup:
    keyboard = []
    MAX_CALLBACK_LENGTH = 64
    PREFIX = "select_similar:"
    MAX_TEXT_LENGTH = 45  # –ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

    for s in suggestions:
        serial = s["bricklink_id"]
        name = s["name"]

        callback_data = PREFIX + serial
        if len(callback_data.encode("utf-8")) > MAX_CALLBACK_LENGTH:
            max_serial_len = MAX_CALLBACK_LENGTH - len(PREFIX.encode("utf-8"))
            serial = serial.encode("utf-8")[:max_serial_len].decode("utf-8", errors="ignore")
            callback_data = PREFIX + serial

        suffix = f" ({serial})"
        max_name_len = MAX_TEXT_LENGTH - len(suffix)
        display_name = name[:max_name_len - 1] + "‚Ä¶" if len(name) > max_name_len else name
        display_text = f"{display_name}{suffix}"
        keyboard.append([InlineKeyboardButton(text=display_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def add_choice_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤–æ –≤—Ç–æ—Ä–æ–π.
    """
    buttons_row1 = [
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —Ñ–∏–≥—É—Ä–∫—É", callback_data="add_solo_figure"),
        InlineKeyboardButton(text="‚ûï‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä–æ–∫", callback_data="add_few_figure"),
    ]
    buttons_row2 = [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
    ]

    return InlineKeyboardMarkup(inline_keyboard=[buttons_row1, buttons_row2])

def collection_output_kb() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="collection_clear")],
        [InlineKeyboardButton(text="üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ —Ç–∏—Ä‚Äë–ª–∏—Å—Ç", callback_data="collection_tierlist")],
        [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ Excel‚Äë—Ç–∞–±–ª–∏—Ü—É", callback_data="collection_excel")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def tierlist_kb_old() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂", callback_data="create_tierlist")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])


